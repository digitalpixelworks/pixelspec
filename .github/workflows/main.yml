name: Android CI

on:
  push:
    branches:
      - main

permissions:
  contents: write

env:
  ADMOB_APP_ID: ${{ secrets.ADMOB_APP_ID }}
  ADMOB_BANNER_ID: ${{ secrets.ADMOB_BANNER_ID }}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Check for markdown-only changes
        id: check_changes
        run: |
          # Get list of changed files
          CHANGED_FILES=$(git diff --name-only HEAD^ HEAD)
          echo "Changed files:"
          echo "$CHANGED_FILES"
          
          # Check if only .md files were changed
          NON_MD_FILES=$(echo "$CHANGED_FILES" | grep -v "\.md$" || true)
          if [ -z "$NON_MD_FILES" ]; then
            echo "Only markdown files changed - skipping build"
            echo "skip_build=true" >> $GITHUB_ENV
          else
            echo "Non-markdown files changed - proceeding with build"
            echo "skip_build=false" >> $GITHUB_ENV
          fi

      - name: Cache Gradle packages
        if: env.skip_build != 'true'
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper/
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Check commit message
        if: env.skip_build != 'true'
        id: check_commit
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          echo "Commit message: $COMMIT_MESSAGE"
          if [[ "$COMMIT_MESSAGE" == "Increment versionCode to "* ]]; then
            echo "skip_build=true" >> $GITHUB_ENV
          fi

      - name: Set up Java 21
        if: env.skip_build != 'true'
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Set up Android SDK and NDK
        if: env.skip_build != 'true'
        uses: android-actions/setup-android@v2
        with:
          sdk-version: '35.0.0'
          ndk-version: '27.0.11718014'
          distribution-type: 'sdk'
          build-tools: '35.0.0'

      - name: Set up google-services.json
        if: env.skip_build != 'true'
        run: |
          mkdir -p app
          if [ -n "${GOOGLE_SERVICES_JSON}" ]; then
            echo "Decoding google-services.json from the provided environment variable."
            echo "$GOOGLE_SERVICES_JSON" | base64 --decode > app/google-services.json
          else
            echo "No GOOGLE_SERVICES_JSON secret provided. Checking repository for app/google-services.json..."
            if [ ! -f "app/google-services.json" ]; then
              echo "Error: google-services.json is missing in the repository!"
              exit 1
            else
              echo "google-services.json found in the repository."
            fi
          fi
          echo "google-services.json file is ready."
        env:
          GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON || '' }}

      - name: Determine Next Build Number
        id: build_number
        if: env.skip_build != 'true'
        run: |
          vMajor=1
          vMinor=01
          tags=$(git tag -l "v${vMajor}.${vMinor}.*")
          echo "Existing tags: $tags"
          build_numbers=()
          for tag in $tags; do
            build_num=${tag#v${vMajor}.${vMinor}.}
            build_numbers+=($build_num)
          done
          max=0
          for num in "${build_numbers[@]}"; do
            if ((10#$num > max)); then
              max=10#$num
            fi
          done
          echo "Current Max Build Number: $max"
          next=$((max + 1))
          next_padded=$(printf "%04d" $next)
          echo "Next Build Number: $next_padded"
          echo "BUILD_NUMBER=$next_padded" >> $GITHUB_ENV
          echo "versionName=1.${vMinor}.$next_padded" >> $GITHUB_ENV

      - name: Set up signing keystore
        if: env.skip_build != 'true'
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | openssl base64 -d -A -out keystore.jks
          echo "Keystore file created in the root directory."

      - name: Create signing.properties
        if: env.skip_build != 'true'
        run: |
          echo "storeFile=../keystore.jks" > signing.properties
          echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" >> signing.properties
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> signing.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> signing.properties

      - name: Make gradlew executable
        if: env.skip_build != 'true'
        run: chmod +x ./gradlew

      - name: Write Version Name to File
        if: env.skip_build != 'true'
        run: ./gradlew writeVersionNameToFile

      - name: Verify Version Name File
        if: env.skip_build != 'true'
        run: |
          echo "Verifying versionName.txt content:"
          cat app/build/versionName.txt
          echo "Listing app/build directory:"
          ls -l app/build/

      - name: Read App Version
        if: env.skip_build != 'true'
        run: |
          VERSION_NAME=$(cat app/build/versionName.txt)
          echo "versionName=$VERSION_NAME" >> $GITHUB_ENV
          echo "Version Name: $VERSION_NAME"

      - name: Run Lint Checks
        if: env.skip_build != 'true'
        run: ./gradlew lint --warning-mode all

      - name: Build with Gradle
        if: env.skip_build != 'true'
        run: |
          ./gradlew assembleRelease bundleRelease lintVitalRelease \
          -PBUILD_NUMBER=$BUILD_NUMBER \
          -PADMOB_APP_ID=$ADMOB_APP_ID \
          -PADMOB_BANNER_ID=$ADMOB_BANNER_ID \
          --warning-mode all \
          --no-configuration-cache

      - name: Rename Artifacts
        if: env.skip_build != 'true'
        run: |
          ORIGINAL_APK="app/build/outputs/apk/release/app-release.apk"
          RENAMED_APK="app/build/outputs/apk/release/io.android.pixelspec_v${{ env.versionName }}.apk"
          mv "$ORIGINAL_APK" "$RENAMED_APK"
          
          ORIGINAL_AAB="app/build/outputs/bundle/release/app-release.aab"
          RENAMED_AAB="app/build/outputs/bundle/release/io.android.pixelspec_v${{ env.versionName }}.aab"
          mv "$ORIGINAL_AAB" "$RENAMED_AAB"
          
          echo "APK renamed to $RENAMED_APK"
          echo "AAB renamed to $RENAMED_AAB"
          ls -l app/build/outputs/apk/release/
          ls -l app/build/outputs/bundle/release/

      - name: Verify Artifacts Before Upload
        if: env.skip_build != 'true'
        run: |
          if [ -f "app/build/outputs/apk/release/io.android.pixelspec_v${{ env.versionName }}.apk" ] && \
             [ -f "app/build/outputs/bundle/release/io.android.pixelspec_v${{ env.versionName }}.aab" ]; then
            echo "Both APK and AAB exist and are ready for upload."
          else
            echo "One or both artifacts are missing."
            exit 1
          fi

      - name: Collect Release Notes
        id: release_notes
        if: env.skip_build != 'true'
        run: |
          is_automated_commit() {
            local message="$1"
            if [[ "$message" =~ ^Update\ android-ci\.yml || "$message" =~ ^Update\ create-release\.yml ]]; then
              return 0
            else
              return 1
            fi
          }
          RECENT_COMMIT=$(git log -1 --pretty=%B)
          if is_automated_commit "$RECENT_COMMIT"; then
            RECENT_COMMIT=$(git log -2 --pretty=format:"%B" | tail -1)
          fi
          echo "release_notes=$RECENT_COMMIT" >> $GITHUB_ENV

      - name: Create and Push Tag
        if: env.skip_build != 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "v${{ env.versionName }}" -m "Release v${{ env.versionName }}"
          git push origin "v${{ env.versionName }}"

      - name: Upload artifacts
        if: env.skip_build != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: |
            app/build/outputs/apk/release/io.android.pixelspec_v${{ env.versionName }}.apk
            app/build/outputs/bundle/release/io.android.pixelspec_v${{ env.versionName }}.aab
          retention-days: 2

      - name: Create GitHub Release
        if: env.skip_build != 'true'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "v${{ env.versionName }}"
          release_name: "Release v${{ env.versionName }}"
          body: ${{ env.release_notes }}
          draft: false
          prerelease: false

      - name: Upload Release APK
        if: env.skip_build != 'true'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: app/build/outputs/apk/release/io.android.pixelspec_v${{ env.versionName }}.apk
          asset_name: io.android.pixelspec_v${{ env.versionName }}.apk
          asset_content_type: application/vnd.android.package-archive

      - name: Upload Release AAB
        if: env.skip_build != 'true'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: app/build/outputs/bundle/release/io.android.pixelspec_v${{ env.versionName }}.aab
          asset_name: io.android.pixelspec_v${{ env.versionName }}.aab
          asset_content_type: application/octet-stream